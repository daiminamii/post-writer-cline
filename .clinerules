# コーディングプラクティス

## 原則

### 関数型アプローチ (FP)

- 純粋関数を優先
- 不変データ構造を使用
- 副作用を分離
- 型安全性を確保

### ドメイン駆動設計 (DDD)

- 値オブジェクトとエンティティを区別
- 集約で整合性を保証
- リポジトリでデータアクセスを抽象化
- 境界付けられたコンテキストを意識

### テスト駆動開発 (TDD)

- Red-Green-Refactorサイクル
- テストを仕様として扱う
- 小さな単位で反復
- 継続的なリファクタリング

## 実装パターン

### 型定義

```typescript
// ブランデッド型で型安全性を確保
type Branded<T, B> = T & { _brand: B };
type Money = Branded<number, "Money">;
type Email = Branded<string, "Email">;
```

### 値オブジェクト

- 不変
- 値に基づく同一性
- 自己検証
- ドメイン操作を持つ

```typescript
// 作成関数はバリデーション付き
function createMoney(amount: number): Result<Money, Error> {
  if (amount < 0) return err(new Error("負の金額不可"));
  return ok(amount as Money);
}
```

### エンティティ

- IDに基づく同一性
- 制御された更新
- 整合性ルールを持つ

### Result型

```typescript
type Result<T, E> = { ok: true; value: T } | { ok: false; error: E };
```

- 成功/失敗を明示
- 早期リターンパターンを使用
- エラー型を定義

### リポジトリ

- ドメインモデルのみを扱う
- 永続化の詳細を隠蔽
- テスト用のインメモリ実装を提供

### アダプターパターン

- 外部依存を抽象化
- インターフェースは呼び出し側で定義
- テスト時は容易に差し替え可能

## 実装手順

1. **型設計**
   - まず型を定義
   - ドメインの言語を型で表現

2. **純粋関数から実装**
   - 外部依存のない関数を先に
   - テストを先に書く

3. **副作用を分離**
   - IO操作は関数の境界に押し出す
   - 副作用を持つ処理をPromiseでラップ

4. **アダプター実装**
   - 外部サービスやDBへのアクセスを抽象化
   - テスト用モックを用意

## プラクティス

- 小さく始めて段階的に拡張
- 過度な抽象化を避ける
- コードよりも型を重視
- 複雑さに応じてアプローチを調整

## コードスタイル

- 関数優先（クラスは必要な場合のみ）
- 不変更新パターンの活用
- 早期リターンで条件分岐をフラット化
- エラーとユースケースの列挙型定義

## テスト戦略

- 純粋関数の単体テストを優先
- インメモリ実装によるリポジトリテスト
- テスト可能性を設計に組み込む
- アサートファースト：期待結果から逆算


# テスト駆動開発 (TDD) の基本

## 基本概念

テスト駆動開発（TDD）は以下のサイクルで進める開発手法です：

1. **Red**: まず失敗するテストを書く
2. **Green**: テストが通るように最小限の実装をする
3. **Refactor**: コードをリファクタリングして改善する

## 重要な考え方

- **テストは仕様である**: テストコードは実装の仕様を表現したもの
- **Assert-Act-Arrange の順序で考える**:
  1. まず期待する結果（アサーション）を定義
  2. 次に操作（テスト対象の処理）を定義
  3. 最後に準備（テスト環境のセットアップ）を定義
- **テスト名は「状況→操作→結果」の形式で記述**: 例:
  「有効なトークンの場合にユーザー情報を取得すると成功すること」

## リファクタリングフェーズの重要ツール

テストが通った後のリファクタリングフェーズでは、以下のツールを活用します：

1. **静的解析・型チェック**:
   - TypeScript: `tsc --noEmit`
   - ESLint: `eslint .`

2. **デッドコード検出・削除**:
   - ツール例: `ts-prune`
   - VSCode用の未使用コード検出拡張機能

3. **コードカバレッジ測定**:
   - Jest: `jest --coverage`
   - Vitest: `vitest run --coverage`

4. **Gitによるバージョン管理**:
   - 各フェーズ（テスト作成→実装→リファクタリング）の完了時にコミット
   - タスク完了時にはユーザーに確認：
     ```bash
     git status  # 変更状態を確認
     git add <関連ファイル>
     git commit -m "<適切なコミットメッセージ>"
     ```
   - コミットメッセージはプレフィックスを使用：
     - `test:` - テストの追加・修正
     - `feat:` - 新機能の実装
     - `refactor:` - リファクタリング

## TypeScript

TypeScriptでのコーディングにおける一般的なベストプラクティスをまとめます。

### 方針

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- 実装が内部状態を持たないとき、 class による実装を避けて関数を優先する
- 副作用を抽象するために、アダプタパターンで外部依存を抽象し、テストではインメモリなアダプタで処理する

### 型の使用方針

1. 具体的な型を使用
   - any の使用を避ける
   - unknown を使用してから型を絞り込む
   - Utility Types を活用する

2. 型エイリアスの命名
   - 意味のある名前をつける
   - 型の意図を明確にする
   ```ts
   // Good
   type UserId = string;
   type UserData = {
     id: UserId;
     createdAt: Date;
   };

   // Bad
   type Data = any;
   ```

### エラー処理

1. Result型の使用
   ```ts
   import { err, ok, Result } from "neverthrow";

   type ApiError =
     | { type: "network"; message: string }
     | { type: "notFound"; message: string }
     | { type: "unauthorized"; message: string };

   async function fetchUser(id: string): Promise<Result<User, ApiError>> {
     try {
       const response = await fetch(`/api/users/${id}`);
       if (!response.ok) {
         switch (response.status) {
           case 404:
             return err({ type: "notFound", message: "User not found" });
           case 401:
             return err({ type: "unauthorized", message: "Unauthorized" });
           default:
             return err({
               type: "network",
               message: `HTTP error: ${response.status}`,
             });
         }
       }
       return ok(await response.json());
     } catch (error) {
       return err({
         type: "network",
         message: error instanceof Error ? error.message : "Unknown error",
       });
     }
   }
   ```

2. エラー型の定義
   - 具体的なケースを列挙
   - エラーメッセージを含める
   - 型の網羅性チェックを活用

### 実装パターン

1. 関数ベース（状態を持たない場合）
   ```ts
   // インターフェース
   interface Logger {
     log(message: string): void;
   }

   // 実装
   function createLogger(): Logger {
     return {
       log(message: string): void {
         console.log(`[${new Date().toISOString()}] ${message}`);
       },
     };
   }
   ```

2. classベース（状態を持つ場合）
   ```ts
   interface Cache<T> {
     get(key: string): T | undefined;
     set(key: string, value: T): void;
   }

   class TimeBasedCache<T> implements Cache<T> {
     private items = new Map<string, { value: T; expireAt: number }>();

     constructor(private ttlMs: number) {}

     get(key: string): T | undefined {
       const item = this.items.get(key);
       if (!item || Date.now() > item.expireAt) {
         return undefined;
       }
       return item.value;
     }

     set(key: string, value: T): void {
       this.items.set(key, {
         value,
         expireAt: Date.now() + this.ttlMs,
       });
     }
   }
   ```

3. Adapterパターン（外部依存の抽象化）
   ```ts
   // 抽象化
   type Fetcher = <T>(path: string) => Promise<Result<T, ApiError>>;

   // 実装
   function createFetcher(headers: Record<string, string>): Fetcher {
     return async <T>(path: string) => {
       try {
         const response = await fetch(path, { headers });
         if (!response.ok) {
           return err({
             type: "network",
             message: `HTTP error: ${response.status}`,
           });
         }
         return ok(await response.json());
       } catch (error) {
         return err({
           type: "network",
           message: error instanceof Error ? error.message : "Unknown error",
         });
       }
     };
   }

   // 利用
   class ApiClient {
     constructor(
       private readonly getData: Fetcher,
       private readonly baseUrl: string,
     ) {}

     async getUser(id: string): Promise<Result<User, ApiError>> {
       return await this.getData(`${this.baseUrl}/users/${id}`);
     }
   }
   ```

### 実装の選択基準

1. 関数を選ぶ場合
   - 単純な操作のみ
   - 内部状態が不要
   - 依存が少ない
   - テストが容易

2. classを選ぶ場合
   - 内部状態の管理が必要
   - 設定やリソースの保持が必要
   - メソッド間で状態を共有
   - ライフサイクル管理が必要

3. Adapterを選ぶ場合
   - 外部依存の抽象化
   - テスト時のモック化が必要
   - 実装の詳細を隠蔽したい
   - 差し替え可能性を確保したい

### 一般的なルール

1. 依存性の注入
   - 外部依存はコンストラクタで注入
   - テスト時にモックに置き換え可能に
   - グローバルな状態を避ける

2. インターフェースの設計
   - 必要最小限のメソッドを定義
   - 実装の詳細を含めない
   - プラットフォーム固有の型を避ける

3. テスト容易性
   - モックの実装を簡潔に
   - エッジケースのテストを含める
   - テストヘルパーを適切に分離

4. コードの分割
   - 単一責任の原則に従う
   - 適切な粒度でモジュール化
   - 循環参照を避ける

## Pythonコーディング規約
### ドキュメント規約
- PEP 257に準拠した日本語DocString
  - 簡潔で明確な記述（「です・ます・。」は不使用）
  - モジュール、クラス、関数レベルの文書化
  - 一般的なユースケースの例示
### 型ヒント
- PEP 484に準拠した型アノテーション
- 最新のPython型ヒント
  - typing.List → list
  - typing.Dict → dict
  - typing.Any → any
  - typing.Optional → | None
  - typing.Union[A, B] → A | B
- Literal型やTypeVar等の適切な使用
- Final変数の明示
### 引数と戻り値の文書化
- Args:
  - 名前: 型
    説明（省略可能性、デフォルト値、制約事項）
- Returns:
  - 型
    説明（戻り値の意味、範囲、特殊なケース）
- Raises:
  - 例外の種類と発生条件
- Examples:
  - コード実行例と期待される出力
### コメント規約
- インラインコメント
  - 複雑なロジックの説明
  - 非自明な実装の理由
  - 警告や注意点
- TODO/FIXME等の標準マーカー
- 実装の代替案や制約についての説明
### コード品質
- mypy互換の型システム
- 循環インポートの防止
- パフォーマンスに関する考慮事項
- メモリ使用に関する注意点
### ベストプラクティス
- デフォルト引数での可変オブジェクトの回避
- コンテキストマネージャの適切な使用
- イテレータとジェネレータの効率的な利用
- 例外処理の適切な範囲
### 制約事項
- Python 3.10以降の機能を使用
- 外部ライブラリへの依存は明示
- プラットフォーム依存のコードは回避
### 説明が必要な実装箇所
- 複雑なアルゴリズムやデータ構造
- 非標準的なパターンの使用
- パフォーマンス最適化
- 特殊なエッジケースの処理


# Lua コーディング規約 (Roblox向け)

## ドキュメント規約
- LuaDocに準拠したコメント
  - 簡潔で明確な記述（「です・ます・。」は不使用）
  - モジュール、クラス、関数レベルの文書化
  - 一般的なユースケースの例示
- コメントブロックの書式
  ```lua
  --[[
    関数や重要なコードブロックの説明
    複数行に渡るコメント
  --]]
  ```
- 単行コメントの書式
  ```lua
  -- 単行の説明コメント
  ```

## 型システム
- Luaは動的型付け言語だが、コメントで型を明示
  ```lua
  -- @param name string プレイヤーの名前
  -- @return number スコア値
  ```
- Luacheck等の静的解析ツールの利用
- Roblox特有のデータ型の明記
  - Instance
  - Vector3
  - CFrame
  - Color3
  - Enum
  - RBXScriptSignal

## 引数と戻り値の文書化
- @param:
  - 名前 型
    説明（省略可能性、デフォルト値、制約事項）
- @return:
  - 型
    説明（戻り値の意味、範囲、特殊なケース）
- @error:
  - エラー発生条件と説明
- @example:
  - コード実行例と期待される出力

## コメント規約
- インラインコメント
  - 複雑なロジックの説明
  - 非自明な実装の理由
  - 警告や注意点
- TODO/FIXME等の標準マーカー
  ```lua
  -- TODO: このアルゴリズムを最適化する
  -- FIXME: この計算は大きな入力で問題を起こす
  ```
- 実装の代替案や制約についての説明

## コード品質
- 変数のスコープを最小限に保つ
  - ローカル変数を優先（`local`キーワード）
  - グローバル変数は避ける
- メモリと性能の最適化
  - テーブルの再利用
  - 頻繁なガベージコレクションの回避
- 循環参照の防止
- モジュール間の依存関係の明確化

## 命名規則
- 変数名とファンクション名: camelCase
  ```lua
  local playerScore = 0
  function calculateDamage(baseDamage, multiplier)
  ```
- 定数: UPPER_SNAKE_CASE
  ```lua
  local MAX_PLAYERS = 10
  ```
- クラス/モジュール名: PascalCase
  ```lua
  local PlayerManager = {}
  ```
- プライベートメンバー: _prefixCamelCase
  ```lua
  function Player:_calculateInternalState()
  ```
- Robloxサービス: 公式命名を維持
  ```lua
  local Players = game:GetService("Players")
  ```

## テーブルと関数
- テーブル宣言は一貫したスタイルを使用
  ```lua
  local config = {
    maxPlayers = 10,
    timeLimit = 300,
    mapName = "Desert"
  }
  ```
- メソッド定義はコロン構文を使用
  ```lua
  function Player:damage(amount)
    self.health = self.health - amount
  end
  ```
- 関数呼び出しは丸括弧を使用（引数がある場合）
  ```lua
  local result = calculateScore(player, time)
  ```

## Roblox特有のベストプラクティス
- オブジェクト参照
  ```lua
  -- 推奨
  local part = workspace.Part
  -- 非推奨（性能低下）
  local part = game.Workspace.Part
  ```
- イベント接続と切断
  ```lua
  -- 接続
  local connection = part.Touched:Connect(function(hit)
    print("Touched by: " .. hit.Name)
  end)
  
  -- 切断（必要なときに）
  connection:Disconnect()
  ```
- yield関数の適切な使用
  ```lua
  wait(1) -- 1秒待機
  task.wait(1) -- より正確なタイミングで1秒待機（推奨）
  ```

## コード構造
- モジュール化されたコード
  ```lua
  local MyModule = {}
  
  function MyModule.publicFunction()
  end
  
  local function privateFunction()
  end
  
  return MyModule
  ```
- オブジェクト指向パターン
  ```lua
  local Player = {}
  Player.__index = Player
  
  function Player.new(name)
    local self = setmetatable({}, Player)
    self.name = name
    self.health = 100
    return self
  end
  
  function Player:damage(amount)
    self.health = self.health - amount
  end
  
  return Player
  ```

## エラー処理
- pcall/xpcall の使用
  ```lua
  local success, result = pcall(function()
    -- エラーが発生する可能性のあるコード
    return riskyOperation()
  end)
  
  if not success then
    warn("エラー発生: " .. result)
  end
  ```
- 意図的なエラー発生
  ```lua
  if playerCount > MAX_PLAYERS then
    error("プレイヤー数が上限を超えています")
  end
  ```

## 非同期プログラミング
- コルーチンの適切な使用
  ```lua
  coroutine.wrap(function()
    -- 非同期処理
  end)()
  ```
- Promise パターンの実装（必要に応じて）

## 制約事項
- Lua 5.1互換のコードを使用（Robloxの制約）
- Robloxプラットフォームの制限を考慮
- パフォーマンスとメモリ使用量に注意
- サーバーとクライアントのコードを適切に分離

## 説明が必要な実装箇所
- 複雑なアルゴリズムやデータ構造
- 非標準的なパターンの使用
- パフォーマンス最適化
- ネットワーク通信関連の実装
- レプリケーションの処理